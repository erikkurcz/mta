// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#include "nyct-subway.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nyct_2dsubway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NyctFeedHeader_nyct_2dsubway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nyct_2dsubway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nyct_2dsubway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NyctTripDescriptor_nyct_2dsubway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nyct_2dsubway_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TripReplacementPeriod_nyct_2dsubway_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRange_gtfs_2drealtime_2eproto;
class TripReplacementPeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TripReplacementPeriod> _instance;
} _TripReplacementPeriod_default_instance_;
class NyctFeedHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NyctFeedHeader> _instance;
} _NyctFeedHeader_default_instance_;
class NyctTripDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NyctTripDescriptor> _instance;
} _NyctTripDescriptor_default_instance_;
class NyctStopTimeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NyctStopTimeUpdate> _instance;
} _NyctStopTimeUpdate_default_instance_;
static void InitDefaultsscc_info_NyctFeedHeader_nyct_2dsubway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NyctFeedHeader_default_instance_;
    new (ptr) ::NyctFeedHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NyctFeedHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NyctFeedHeader_nyct_2dsubway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NyctFeedHeader_nyct_2dsubway_2eproto}, {
      &scc_info_TripReplacementPeriod_nyct_2dsubway_2eproto.base,}};

static void InitDefaultsscc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NyctStopTimeUpdate_default_instance_;
    new (ptr) ::NyctStopTimeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NyctStopTimeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto}, {}};

static void InitDefaultsscc_info_NyctTripDescriptor_nyct_2dsubway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NyctTripDescriptor_default_instance_;
    new (ptr) ::NyctTripDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NyctTripDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NyctTripDescriptor_nyct_2dsubway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NyctTripDescriptor_nyct_2dsubway_2eproto}, {}};

static void InitDefaultsscc_info_TripReplacementPeriod_nyct_2dsubway_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TripReplacementPeriod_default_instance_;
    new (ptr) ::TripReplacementPeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TripReplacementPeriod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TripReplacementPeriod_nyct_2dsubway_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TripReplacementPeriod_nyct_2dsubway_2eproto}, {
      &scc_info_TimeRange_gtfs_2drealtime_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nyct_2dsubway_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nyct_2dsubway_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nyct_2dsubway_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nyct_2dsubway_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TripReplacementPeriod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TripReplacementPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TripReplacementPeriod, route_id_),
  PROTOBUF_FIELD_OFFSET(::TripReplacementPeriod, replacement_period_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::NyctFeedHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NyctFeedHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NyctFeedHeader, nyct_subway_version_),
  PROTOBUF_FIELD_OFFSET(::NyctFeedHeader, trip_replacement_period_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NyctTripDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NyctTripDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NyctTripDescriptor, train_id_),
  PROTOBUF_FIELD_OFFSET(::NyctTripDescriptor, is_assigned_),
  PROTOBUF_FIELD_OFFSET(::NyctTripDescriptor, direction_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::NyctStopTimeUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NyctStopTimeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NyctStopTimeUpdate, scheduled_track_),
  PROTOBUF_FIELD_OFFSET(::NyctStopTimeUpdate, actual_track_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TripReplacementPeriod)},
  { 9, 16, sizeof(::NyctFeedHeader)},
  { 18, 26, sizeof(::NyctTripDescriptor)},
  { 29, 36, sizeof(::NyctStopTimeUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TripReplacementPeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NyctFeedHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NyctTripDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NyctStopTimeUpdate_default_instance_),
};

const char descriptor_table_protodef_nyct_2dsubway_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021nyct-subway.proto\032\023gtfs-realtime.proto"
  "\"b\n\025TripReplacementPeriod\022\020\n\010route_id\030\001 "
  "\001(\t\0227\n\022replacement_period\030\002 \001(\0132\033.transi"
  "t_realtime.TimeRange\"f\n\016NyctFeedHeader\022\033"
  "\n\023nyct_subway_version\030\001 \002(\t\0227\n\027trip_repl"
  "acement_period\030\002 \003(\0132\026.TripReplacementPe"
  "riod\"\244\001\n\022NyctTripDescriptor\022\020\n\010train_id\030"
  "\001 \001(\014\022\023\n\013is_assigned\030\002 \001(\010\0220\n\tdirection\030"
  "\003 \001(\0162\035.NyctTripDescriptor.Direction\"5\n\t"
  "Direction\022\t\n\005NORTH\020\001\022\010\n\004EAST\020\002\022\t\n\005SOUTH\020"
  "\003\022\010\n\004WEST\020\004\"C\n\022NyctStopTimeUpdate\022\027\n\017sch"
  "eduled_track\030\001 \001(\t\022\024\n\014actual_track\030\002 \001(\t"
  ":H\n\020nyct_feed_header\022\034.transit_realtime."
  "FeedHeader\030\351\007 \001(\0132\017.NyctFeedHeader:T\n\024ny"
  "ct_trip_descriptor\022 .transit_realtime.Tr"
  "ipDescriptor\030\351\007 \001(\0132\023.NyctTripDescriptor"
  ":`\n\025nyct_stop_time_update\022+.transit_real"
  "time.TripUpdate.StopTimeUpdate\030\351\007 \001(\0132\023."
  "NyctStopTimeUpdateB\035\n\033com.google.transit"
  ".realtime"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nyct_2dsubway_2eproto_deps[1] = {
  &::descriptor_table_gtfs_2drealtime_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nyct_2dsubway_2eproto_sccs[4] = {
  &scc_info_NyctFeedHeader_nyct_2dsubway_2eproto.base,
  &scc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto.base,
  &scc_info_NyctTripDescriptor_nyct_2dsubway_2eproto.base,
  &scc_info_TripReplacementPeriod_nyct_2dsubway_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nyct_2dsubway_2eproto_once;
static bool descriptor_table_nyct_2dsubway_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nyct_2dsubway_2eproto = {
  &descriptor_table_nyct_2dsubway_2eproto_initialized, descriptor_table_protodef_nyct_2dsubway_2eproto, "nyct-subway.proto", 769,
  &descriptor_table_nyct_2dsubway_2eproto_once, descriptor_table_nyct_2dsubway_2eproto_sccs, descriptor_table_nyct_2dsubway_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_nyct_2dsubway_2eproto::offsets,
  file_level_metadata_nyct_2dsubway_2eproto, 4, file_level_enum_descriptors_nyct_2dsubway_2eproto, file_level_service_descriptors_nyct_2dsubway_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nyct_2dsubway_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nyct_2dsubway_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NyctTripDescriptor_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nyct_2dsubway_2eproto);
  return file_level_enum_descriptors_nyct_2dsubway_2eproto[0];
}
bool NyctTripDescriptor_Direction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NyctTripDescriptor_Direction NyctTripDescriptor::NORTH;
constexpr NyctTripDescriptor_Direction NyctTripDescriptor::EAST;
constexpr NyctTripDescriptor_Direction NyctTripDescriptor::SOUTH;
constexpr NyctTripDescriptor_Direction NyctTripDescriptor::WEST;
constexpr NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MIN;
constexpr NyctTripDescriptor_Direction NyctTripDescriptor::Direction_MAX;
constexpr int NyctTripDescriptor::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TripReplacementPeriod::InitAsDefaultInstance() {
  ::_TripReplacementPeriod_default_instance_._instance.get_mutable()->replacement_period_ = const_cast< ::transit_realtime::TimeRange*>(
      ::transit_realtime::TimeRange::internal_default_instance());
}
class TripReplacementPeriod::_Internal {
 public:
  using HasBits = decltype(std::declval<TripReplacementPeriod>()._has_bits_);
  static void set_has_route_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::transit_realtime::TimeRange& replacement_period(const TripReplacementPeriod* msg);
  static void set_has_replacement_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::transit_realtime::TimeRange&
TripReplacementPeriod::_Internal::replacement_period(const TripReplacementPeriod* msg) {
  return *msg->replacement_period_;
}
void TripReplacementPeriod::clear_replacement_period() {
  if (replacement_period_ != nullptr) replacement_period_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TripReplacementPeriod::TripReplacementPeriod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TripReplacementPeriod)
}
TripReplacementPeriod::TripReplacementPeriod(const TripReplacementPeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_route_id()) {
    route_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_id_);
  }
  if (from._internal_has_replacement_period()) {
    replacement_period_ = new ::transit_realtime::TimeRange(*from.replacement_period_);
  } else {
    replacement_period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TripReplacementPeriod)
}

void TripReplacementPeriod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TripReplacementPeriod_nyct_2dsubway_2eproto.base);
  route_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  replacement_period_ = nullptr;
}

TripReplacementPeriod::~TripReplacementPeriod() {
  // @@protoc_insertion_point(destructor:TripReplacementPeriod)
  SharedDtor();
}

void TripReplacementPeriod::SharedDtor() {
  route_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete replacement_period_;
}

void TripReplacementPeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TripReplacementPeriod& TripReplacementPeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TripReplacementPeriod_nyct_2dsubway_2eproto.base);
  return *internal_default_instance();
}


void TripReplacementPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:TripReplacementPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      route_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(replacement_period_ != nullptr);
      replacement_period_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TripReplacementPeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_route_id(), ptr, ctx, "TripReplacementPeriod.route_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .transit_realtime.TimeRange replacement_period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TripReplacementPeriod::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TripReplacementPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string route_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TripReplacementPeriod.route_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route_id(), target);
  }

  // optional .transit_realtime.TimeRange replacement_period = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::replacement_period(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TripReplacementPeriod)
  return target;
}

size_t TripReplacementPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TripReplacementPeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string route_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route_id());
    }

    // optional .transit_realtime.TimeRange replacement_period = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *replacement_period_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripReplacementPeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TripReplacementPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const TripReplacementPeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TripReplacementPeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TripReplacementPeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TripReplacementPeriod)
    MergeFrom(*source);
  }
}

void TripReplacementPeriod::MergeFrom(const TripReplacementPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TripReplacementPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      route_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_replacement_period()->::transit_realtime::TimeRange::MergeFrom(from._internal_replacement_period());
    }
  }
}

void TripReplacementPeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TripReplacementPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripReplacementPeriod::CopyFrom(const TripReplacementPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TripReplacementPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripReplacementPeriod::IsInitialized() const {
  if (has_replacement_period()) {
    if (!this->replacement_period_->IsInitialized()) return false;
  }
  return true;
}

void TripReplacementPeriod::InternalSwap(TripReplacementPeriod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  route_id_.Swap(&other->route_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replacement_period_, other->replacement_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TripReplacementPeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NyctFeedHeader::InitAsDefaultInstance() {
}
class NyctFeedHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<NyctFeedHeader>()._has_bits_);
  static void set_has_nyct_subway_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NyctFeedHeader::NyctFeedHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctFeedHeader)
}
NyctFeedHeader::NyctFeedHeader(const NyctFeedHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trip_replacement_period_(from.trip_replacement_period_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nyct_subway_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nyct_subway_version()) {
    nyct_subway_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nyct_subway_version_);
  }
  // @@protoc_insertion_point(copy_constructor:NyctFeedHeader)
}

void NyctFeedHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NyctFeedHeader_nyct_2dsubway_2eproto.base);
  nyct_subway_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NyctFeedHeader::~NyctFeedHeader() {
  // @@protoc_insertion_point(destructor:NyctFeedHeader)
  SharedDtor();
}

void NyctFeedHeader::SharedDtor() {
  nyct_subway_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NyctFeedHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NyctFeedHeader& NyctFeedHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NyctFeedHeader_nyct_2dsubway_2eproto.base);
  return *internal_default_instance();
}


void NyctFeedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:NyctFeedHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_replacement_period_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nyct_subway_version_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NyctFeedHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string nyct_subway_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_nyct_subway_version(), ptr, ctx, "NyctFeedHeader.nyct_subway_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TripReplacementPeriod trip_replacement_period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trip_replacement_period(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NyctFeedHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NyctFeedHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string nyct_subway_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nyct_subway_version().data(), static_cast<int>(this->_internal_nyct_subway_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NyctFeedHeader.nyct_subway_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nyct_subway_version(), target);
  }

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trip_replacement_period_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_trip_replacement_period(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctFeedHeader)
  return target;
}

size_t NyctFeedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NyctFeedHeader)
  size_t total_size = 0;

  // required string nyct_subway_version = 1;
  if (has_nyct_subway_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nyct_subway_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  total_size += 1UL * this->_internal_trip_replacement_period_size();
  for (const auto& msg : this->trip_replacement_period_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NyctFeedHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NyctFeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const NyctFeedHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NyctFeedHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NyctFeedHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NyctFeedHeader)
    MergeFrom(*source);
  }
}

void NyctFeedHeader::MergeFrom(const NyctFeedHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NyctFeedHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trip_replacement_period_.MergeFrom(from.trip_replacement_period_);
  if (from._internal_has_nyct_subway_version()) {
    _has_bits_[0] |= 0x00000001u;
    nyct_subway_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nyct_subway_version_);
  }
}

void NyctFeedHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NyctFeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctFeedHeader::CopyFrom(const NyctFeedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NyctFeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctFeedHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->trip_replacement_period())) return false;
  return true;
}

void NyctFeedHeader::InternalSwap(NyctFeedHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trip_replacement_period_.InternalSwap(&other->trip_replacement_period_);
  nyct_subway_version_.Swap(&other->nyct_subway_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NyctFeedHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NyctTripDescriptor::InitAsDefaultInstance() {
}
class NyctTripDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<NyctTripDescriptor>()._has_bits_);
  static void set_has_train_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_assigned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NyctTripDescriptor::NyctTripDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctTripDescriptor)
}
NyctTripDescriptor::NyctTripDescriptor(const NyctTripDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  train_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_train_id()) {
    train_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.train_id_);
  }
  ::memcpy(&is_assigned_, &from.is_assigned_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&is_assigned_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:NyctTripDescriptor)
}

void NyctTripDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NyctTripDescriptor_nyct_2dsubway_2eproto.base);
  train_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_assigned_ = false;
  direction_ = 1;
}

NyctTripDescriptor::~NyctTripDescriptor() {
  // @@protoc_insertion_point(destructor:NyctTripDescriptor)
  SharedDtor();
}

void NyctTripDescriptor::SharedDtor() {
  train_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NyctTripDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NyctTripDescriptor& NyctTripDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NyctTripDescriptor_nyct_2dsubway_2eproto.base);
  return *internal_default_instance();
}


void NyctTripDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:NyctTripDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    train_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    is_assigned_ = false;
    direction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NyctTripDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes train_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_train_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_assigned(&has_bits);
          is_assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .NyctTripDescriptor.Direction direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::NyctTripDescriptor_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::NyctTripDescriptor_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NyctTripDescriptor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NyctTripDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes train_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_train_id(), target);
  }

  // optional bool is_assigned = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_assigned(), target);
  }

  // optional .NyctTripDescriptor.Direction direction = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctTripDescriptor)
  return target;
}

size_t NyctTripDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NyctTripDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes train_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_train_id());
    }

    // optional bool is_assigned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .NyctTripDescriptor.Direction direction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NyctTripDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NyctTripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const NyctTripDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NyctTripDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NyctTripDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NyctTripDescriptor)
    MergeFrom(*source);
  }
}

void NyctTripDescriptor::MergeFrom(const NyctTripDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NyctTripDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      train_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.train_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_assigned_ = from.is_assigned_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NyctTripDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NyctTripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctTripDescriptor::CopyFrom(const NyctTripDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NyctTripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctTripDescriptor::IsInitialized() const {
  return true;
}

void NyctTripDescriptor::InternalSwap(NyctTripDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  train_id_.Swap(&other->train_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_assigned_, other->is_assigned_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NyctTripDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NyctStopTimeUpdate::InitAsDefaultInstance() {
}
class NyctStopTimeUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<NyctStopTimeUpdate>()._has_bits_);
  static void set_has_scheduled_track(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actual_track(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NyctStopTimeUpdate::NyctStopTimeUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NyctStopTimeUpdate)
}
NyctStopTimeUpdate::NyctStopTimeUpdate(const NyctStopTimeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scheduled_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheduled_track()) {
    scheduled_track_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheduled_track_);
  }
  actual_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_actual_track()) {
    actual_track_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actual_track_);
  }
  // @@protoc_insertion_point(copy_constructor:NyctStopTimeUpdate)
}

void NyctStopTimeUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto.base);
  scheduled_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NyctStopTimeUpdate::~NyctStopTimeUpdate() {
  // @@protoc_insertion_point(destructor:NyctStopTimeUpdate)
  SharedDtor();
}

void NyctStopTimeUpdate::SharedDtor() {
  scheduled_track_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_track_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NyctStopTimeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NyctStopTimeUpdate& NyctStopTimeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NyctStopTimeUpdate_nyct_2dsubway_2eproto.base);
  return *internal_default_instance();
}


void NyctStopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:NyctStopTimeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scheduled_track_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      actual_track_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NyctStopTimeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scheduled_track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_scheduled_track(), ptr, ctx, "NyctStopTimeUpdate.scheduled_track");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string actual_track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_actual_track(), ptr, ctx, "NyctStopTimeUpdate.actual_track");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NyctStopTimeUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NyctStopTimeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scheduled_track = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheduled_track().data(), static_cast<int>(this->_internal_scheduled_track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.scheduled_track");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scheduled_track(), target);
  }

  // optional string actual_track = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_actual_track().data(), static_cast<int>(this->_internal_actual_track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NyctStopTimeUpdate.actual_track");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actual_track(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NyctStopTimeUpdate)
  return target;
}

size_t NyctStopTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NyctStopTimeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string scheduled_track = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheduled_track());
    }

    // optional string actual_track = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_actual_track());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NyctStopTimeUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NyctStopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const NyctStopTimeUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NyctStopTimeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NyctStopTimeUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NyctStopTimeUpdate)
    MergeFrom(*source);
  }
}

void NyctStopTimeUpdate::MergeFrom(const NyctStopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NyctStopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      scheduled_track_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheduled_track_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      actual_track_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actual_track_);
    }
  }
}

void NyctStopTimeUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NyctStopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NyctStopTimeUpdate::CopyFrom(const NyctStopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NyctStopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NyctStopTimeUpdate::IsInitialized() const {
  return true;
}

void NyctStopTimeUpdate::InternalSwap(NyctStopTimeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scheduled_track_.Swap(&other->scheduled_track_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  actual_track_.Swap(&other->actual_track_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NyctStopTimeUpdate::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header(kNyctFeedHeaderFieldNumber, *::NyctFeedHeader::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor(kNyctTripDescriptorFieldNumber, *::NyctTripDescriptor::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update(kNyctStopTimeUpdateFieldNumber, *::NyctStopTimeUpdate::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TripReplacementPeriod* Arena::CreateMaybeMessage< ::TripReplacementPeriod >(Arena* arena) {
  return Arena::CreateInternal< ::TripReplacementPeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::NyctFeedHeader* Arena::CreateMaybeMessage< ::NyctFeedHeader >(Arena* arena) {
  return Arena::CreateInternal< ::NyctFeedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::NyctTripDescriptor* Arena::CreateMaybeMessage< ::NyctTripDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::NyctTripDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::NyctStopTimeUpdate* Arena::CreateMaybeMessage< ::NyctStopTimeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::NyctStopTimeUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
