// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nyct-subway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nyct_2dsubway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nyct_2dsubway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gtfs-realtime.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nyct_2dsubway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nyct_2dsubway_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nyct_2dsubway_2eproto;
class NyctFeedHeader;
class NyctFeedHeaderDefaultTypeInternal;
extern NyctFeedHeaderDefaultTypeInternal _NyctFeedHeader_default_instance_;
class NyctStopTimeUpdate;
class NyctStopTimeUpdateDefaultTypeInternal;
extern NyctStopTimeUpdateDefaultTypeInternal _NyctStopTimeUpdate_default_instance_;
class NyctTripDescriptor;
class NyctTripDescriptorDefaultTypeInternal;
extern NyctTripDescriptorDefaultTypeInternal _NyctTripDescriptor_default_instance_;
class TripReplacementPeriod;
class TripReplacementPeriodDefaultTypeInternal;
extern TripReplacementPeriodDefaultTypeInternal _TripReplacementPeriod_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NyctFeedHeader* Arena::CreateMaybeMessage<::NyctFeedHeader>(Arena*);
template<> ::NyctStopTimeUpdate* Arena::CreateMaybeMessage<::NyctStopTimeUpdate>(Arena*);
template<> ::NyctTripDescriptor* Arena::CreateMaybeMessage<::NyctTripDescriptor>(Arena*);
template<> ::TripReplacementPeriod* Arena::CreateMaybeMessage<::TripReplacementPeriod>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NyctTripDescriptor_Direction : int {
  NyctTripDescriptor_Direction_NORTH = 1,
  NyctTripDescriptor_Direction_EAST = 2,
  NyctTripDescriptor_Direction_SOUTH = 3,
  NyctTripDescriptor_Direction_WEST = 4
};
bool NyctTripDescriptor_Direction_IsValid(int value);
constexpr NyctTripDescriptor_Direction NyctTripDescriptor_Direction_Direction_MIN = NyctTripDescriptor_Direction_NORTH;
constexpr NyctTripDescriptor_Direction NyctTripDescriptor_Direction_Direction_MAX = NyctTripDescriptor_Direction_WEST;
constexpr int NyctTripDescriptor_Direction_Direction_ARRAYSIZE = NyctTripDescriptor_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NyctTripDescriptor_Direction_descriptor();
template<typename T>
inline const std::string& NyctTripDescriptor_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NyctTripDescriptor_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NyctTripDescriptor_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NyctTripDescriptor_Direction_descriptor(), enum_t_value);
}
inline bool NyctTripDescriptor_Direction_Parse(
    const std::string& name, NyctTripDescriptor_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NyctTripDescriptor_Direction>(
    NyctTripDescriptor_Direction_descriptor(), name, value);
}
// ===================================================================

class TripReplacementPeriod :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TripReplacementPeriod) */ {
 public:
  TripReplacementPeriod();
  virtual ~TripReplacementPeriod();

  TripReplacementPeriod(const TripReplacementPeriod& from);
  TripReplacementPeriod(TripReplacementPeriod&& from) noexcept
    : TripReplacementPeriod() {
    *this = ::std::move(from);
  }

  inline TripReplacementPeriod& operator=(const TripReplacementPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripReplacementPeriod& operator=(TripReplacementPeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripReplacementPeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripReplacementPeriod* internal_default_instance() {
    return reinterpret_cast<const TripReplacementPeriod*>(
               &_TripReplacementPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TripReplacementPeriod& a, TripReplacementPeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(TripReplacementPeriod* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripReplacementPeriod* New() const final {
    return CreateMaybeMessage<TripReplacementPeriod>(nullptr);
  }

  TripReplacementPeriod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TripReplacementPeriod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TripReplacementPeriod& from);
  void MergeFrom(const TripReplacementPeriod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripReplacementPeriod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TripReplacementPeriod";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nyct_2dsubway_2eproto);
    return ::descriptor_table_nyct_2dsubway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteIdFieldNumber = 1,
    kReplacementPeriodFieldNumber = 2,
  };
  // optional string route_id = 1;
  bool has_route_id() const;
  private:
  bool _internal_has_route_id() const;
  public:
  void clear_route_id();
  const std::string& route_id() const;
  void set_route_id(const std::string& value);
  void set_route_id(std::string&& value);
  void set_route_id(const char* value);
  void set_route_id(const char* value, size_t size);
  std::string* mutable_route_id();
  std::string* release_route_id();
  void set_allocated_route_id(std::string* route_id);
  private:
  const std::string& _internal_route_id() const;
  void _internal_set_route_id(const std::string& value);
  std::string* _internal_mutable_route_id();
  public:

  // optional .transit_realtime.TimeRange replacement_period = 2;
  bool has_replacement_period() const;
  private:
  bool _internal_has_replacement_period() const;
  public:
  void clear_replacement_period();
  const ::transit_realtime::TimeRange& replacement_period() const;
  ::transit_realtime::TimeRange* release_replacement_period();
  ::transit_realtime::TimeRange* mutable_replacement_period();
  void set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period);
  private:
  const ::transit_realtime::TimeRange& _internal_replacement_period() const;
  ::transit_realtime::TimeRange* _internal_mutable_replacement_period();
  public:

  // @@protoc_insertion_point(class_scope:TripReplacementPeriod)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_id_;
  ::transit_realtime::TimeRange* replacement_period_;
  friend struct ::TableStruct_nyct_2dsubway_2eproto;
};
// -------------------------------------------------------------------

class NyctFeedHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NyctFeedHeader) */ {
 public:
  NyctFeedHeader();
  virtual ~NyctFeedHeader();

  NyctFeedHeader(const NyctFeedHeader& from);
  NyctFeedHeader(NyctFeedHeader&& from) noexcept
    : NyctFeedHeader() {
    *this = ::std::move(from);
  }

  inline NyctFeedHeader& operator=(const NyctFeedHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline NyctFeedHeader& operator=(NyctFeedHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NyctFeedHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NyctFeedHeader* internal_default_instance() {
    return reinterpret_cast<const NyctFeedHeader*>(
               &_NyctFeedHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NyctFeedHeader& a, NyctFeedHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(NyctFeedHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NyctFeedHeader* New() const final {
    return CreateMaybeMessage<NyctFeedHeader>(nullptr);
  }

  NyctFeedHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NyctFeedHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NyctFeedHeader& from);
  void MergeFrom(const NyctFeedHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NyctFeedHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NyctFeedHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nyct_2dsubway_2eproto);
    return ::descriptor_table_nyct_2dsubway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTripReplacementPeriodFieldNumber = 2,
    kNyctSubwayVersionFieldNumber = 1,
  };
  // repeated .TripReplacementPeriod trip_replacement_period = 2;
  int trip_replacement_period_size() const;
  private:
  int _internal_trip_replacement_period_size() const;
  public:
  void clear_trip_replacement_period();
  ::TripReplacementPeriod* mutable_trip_replacement_period(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TripReplacementPeriod >*
      mutable_trip_replacement_period();
  private:
  const ::TripReplacementPeriod& _internal_trip_replacement_period(int index) const;
  ::TripReplacementPeriod* _internal_add_trip_replacement_period();
  public:
  const ::TripReplacementPeriod& trip_replacement_period(int index) const;
  ::TripReplacementPeriod* add_trip_replacement_period();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TripReplacementPeriod >&
      trip_replacement_period() const;

  // required string nyct_subway_version = 1;
  bool has_nyct_subway_version() const;
  private:
  bool _internal_has_nyct_subway_version() const;
  public:
  void clear_nyct_subway_version();
  const std::string& nyct_subway_version() const;
  void set_nyct_subway_version(const std::string& value);
  void set_nyct_subway_version(std::string&& value);
  void set_nyct_subway_version(const char* value);
  void set_nyct_subway_version(const char* value, size_t size);
  std::string* mutable_nyct_subway_version();
  std::string* release_nyct_subway_version();
  void set_allocated_nyct_subway_version(std::string* nyct_subway_version);
  private:
  const std::string& _internal_nyct_subway_version() const;
  void _internal_set_nyct_subway_version(const std::string& value);
  std::string* _internal_mutable_nyct_subway_version();
  public:

  // @@protoc_insertion_point(class_scope:NyctFeedHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TripReplacementPeriod > trip_replacement_period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nyct_subway_version_;
  friend struct ::TableStruct_nyct_2dsubway_2eproto;
};
// -------------------------------------------------------------------

class NyctTripDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NyctTripDescriptor) */ {
 public:
  NyctTripDescriptor();
  virtual ~NyctTripDescriptor();

  NyctTripDescriptor(const NyctTripDescriptor& from);
  NyctTripDescriptor(NyctTripDescriptor&& from) noexcept
    : NyctTripDescriptor() {
    *this = ::std::move(from);
  }

  inline NyctTripDescriptor& operator=(const NyctTripDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NyctTripDescriptor& operator=(NyctTripDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NyctTripDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NyctTripDescriptor* internal_default_instance() {
    return reinterpret_cast<const NyctTripDescriptor*>(
               &_NyctTripDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NyctTripDescriptor& a, NyctTripDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(NyctTripDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NyctTripDescriptor* New() const final {
    return CreateMaybeMessage<NyctTripDescriptor>(nullptr);
  }

  NyctTripDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NyctTripDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NyctTripDescriptor& from);
  void MergeFrom(const NyctTripDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NyctTripDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NyctTripDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nyct_2dsubway_2eproto);
    return ::descriptor_table_nyct_2dsubway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NyctTripDescriptor_Direction Direction;
  static constexpr Direction NORTH =
    NyctTripDescriptor_Direction_NORTH;
  static constexpr Direction EAST =
    NyctTripDescriptor_Direction_EAST;
  static constexpr Direction SOUTH =
    NyctTripDescriptor_Direction_SOUTH;
  static constexpr Direction WEST =
    NyctTripDescriptor_Direction_WEST;
  static inline bool Direction_IsValid(int value) {
    return NyctTripDescriptor_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    NyctTripDescriptor_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    NyctTripDescriptor_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    NyctTripDescriptor_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return NyctTripDescriptor_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return NyctTripDescriptor_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return NyctTripDescriptor_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrainIdFieldNumber = 1,
    kIsAssignedFieldNumber = 2,
    kDirectionFieldNumber = 3,
  };
  // optional bytes train_id = 1;
  bool has_train_id() const;
  private:
  bool _internal_has_train_id() const;
  public:
  void clear_train_id();
  const std::string& train_id() const;
  void set_train_id(const std::string& value);
  void set_train_id(std::string&& value);
  void set_train_id(const char* value);
  void set_train_id(const void* value, size_t size);
  std::string* mutable_train_id();
  std::string* release_train_id();
  void set_allocated_train_id(std::string* train_id);
  private:
  const std::string& _internal_train_id() const;
  void _internal_set_train_id(const std::string& value);
  std::string* _internal_mutable_train_id();
  public:

  // optional bool is_assigned = 2;
  bool has_is_assigned() const;
  private:
  bool _internal_has_is_assigned() const;
  public:
  void clear_is_assigned();
  bool is_assigned() const;
  void set_is_assigned(bool value);
  private:
  bool _internal_is_assigned() const;
  void _internal_set_is_assigned(bool value);
  public:

  // optional .NyctTripDescriptor.Direction direction = 3;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::NyctTripDescriptor_Direction direction() const;
  void set_direction(::NyctTripDescriptor_Direction value);
  private:
  ::NyctTripDescriptor_Direction _internal_direction() const;
  void _internal_set_direction(::NyctTripDescriptor_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:NyctTripDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr train_id_;
  bool is_assigned_;
  int direction_;
  friend struct ::TableStruct_nyct_2dsubway_2eproto;
};
// -------------------------------------------------------------------

class NyctStopTimeUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NyctStopTimeUpdate) */ {
 public:
  NyctStopTimeUpdate();
  virtual ~NyctStopTimeUpdate();

  NyctStopTimeUpdate(const NyctStopTimeUpdate& from);
  NyctStopTimeUpdate(NyctStopTimeUpdate&& from) noexcept
    : NyctStopTimeUpdate() {
    *this = ::std::move(from);
  }

  inline NyctStopTimeUpdate& operator=(const NyctStopTimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NyctStopTimeUpdate& operator=(NyctStopTimeUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NyctStopTimeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NyctStopTimeUpdate* internal_default_instance() {
    return reinterpret_cast<const NyctStopTimeUpdate*>(
               &_NyctStopTimeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NyctStopTimeUpdate& a, NyctStopTimeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(NyctStopTimeUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NyctStopTimeUpdate* New() const final {
    return CreateMaybeMessage<NyctStopTimeUpdate>(nullptr);
  }

  NyctStopTimeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NyctStopTimeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NyctStopTimeUpdate& from);
  void MergeFrom(const NyctStopTimeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NyctStopTimeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NyctStopTimeUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nyct_2dsubway_2eproto);
    return ::descriptor_table_nyct_2dsubway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScheduledTrackFieldNumber = 1,
    kActualTrackFieldNumber = 2,
  };
  // optional string scheduled_track = 1;
  bool has_scheduled_track() const;
  private:
  bool _internal_has_scheduled_track() const;
  public:
  void clear_scheduled_track();
  const std::string& scheduled_track() const;
  void set_scheduled_track(const std::string& value);
  void set_scheduled_track(std::string&& value);
  void set_scheduled_track(const char* value);
  void set_scheduled_track(const char* value, size_t size);
  std::string* mutable_scheduled_track();
  std::string* release_scheduled_track();
  void set_allocated_scheduled_track(std::string* scheduled_track);
  private:
  const std::string& _internal_scheduled_track() const;
  void _internal_set_scheduled_track(const std::string& value);
  std::string* _internal_mutable_scheduled_track();
  public:

  // optional string actual_track = 2;
  bool has_actual_track() const;
  private:
  bool _internal_has_actual_track() const;
  public:
  void clear_actual_track();
  const std::string& actual_track() const;
  void set_actual_track(const std::string& value);
  void set_actual_track(std::string&& value);
  void set_actual_track(const char* value);
  void set_actual_track(const char* value, size_t size);
  std::string* mutable_actual_track();
  std::string* release_actual_track();
  void set_allocated_actual_track(std::string* actual_track);
  private:
  const std::string& _internal_actual_track() const;
  void _internal_set_actual_track(const std::string& value);
  std::string* _internal_mutable_actual_track();
  public:

  // @@protoc_insertion_point(class_scope:NyctStopTimeUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheduled_track_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actual_track_;
  friend struct ::TableStruct_nyct_2dsubway_2eproto;
};
// ===================================================================

static const int kNyctFeedHeaderFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::transit_realtime::FeedHeader,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NyctFeedHeader >, 11, false >
  nyct_feed_header;
static const int kNyctTripDescriptorFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::transit_realtime::TripDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NyctTripDescriptor >, 11, false >
  nyct_trip_descriptor;
static const int kNyctStopTimeUpdateFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::transit_realtime::TripUpdate_StopTimeUpdate,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::NyctStopTimeUpdate >, 11, false >
  nyct_stop_time_update;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TripReplacementPeriod

// optional string route_id = 1;
inline bool TripReplacementPeriod::_internal_has_route_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripReplacementPeriod::has_route_id() const {
  return _internal_has_route_id();
}
inline void TripReplacementPeriod::clear_route_id() {
  route_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TripReplacementPeriod::route_id() const {
  // @@protoc_insertion_point(field_get:TripReplacementPeriod.route_id)
  return _internal_route_id();
}
inline void TripReplacementPeriod::set_route_id(const std::string& value) {
  _internal_set_route_id(value);
  // @@protoc_insertion_point(field_set:TripReplacementPeriod.route_id)
}
inline std::string* TripReplacementPeriod::mutable_route_id() {
  // @@protoc_insertion_point(field_mutable:TripReplacementPeriod.route_id)
  return _internal_mutable_route_id();
}
inline const std::string& TripReplacementPeriod::_internal_route_id() const {
  return route_id_.GetNoArena();
}
inline void TripReplacementPeriod::_internal_set_route_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  route_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TripReplacementPeriod::set_route_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  route_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TripReplacementPeriod.route_id)
}
inline void TripReplacementPeriod::set_route_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  route_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TripReplacementPeriod.route_id)
}
inline void TripReplacementPeriod::set_route_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  route_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TripReplacementPeriod.route_id)
}
inline std::string* TripReplacementPeriod::_internal_mutable_route_id() {
  _has_bits_[0] |= 0x00000001u;
  return route_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TripReplacementPeriod::release_route_id() {
  // @@protoc_insertion_point(field_release:TripReplacementPeriod.route_id)
  if (!has_route_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return route_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TripReplacementPeriod::set_allocated_route_id(std::string* route_id) {
  if (route_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  route_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_id);
  // @@protoc_insertion_point(field_set_allocated:TripReplacementPeriod.route_id)
}

// optional .transit_realtime.TimeRange replacement_period = 2;
inline bool TripReplacementPeriod::_internal_has_replacement_period() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || replacement_period_ != nullptr);
  return value;
}
inline bool TripReplacementPeriod::has_replacement_period() const {
  return _internal_has_replacement_period();
}
inline const ::transit_realtime::TimeRange& TripReplacementPeriod::_internal_replacement_period() const {
  const ::transit_realtime::TimeRange* p = replacement_period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::transit_realtime::TimeRange*>(
      &::transit_realtime::_TimeRange_default_instance_);
}
inline const ::transit_realtime::TimeRange& TripReplacementPeriod::replacement_period() const {
  // @@protoc_insertion_point(field_get:TripReplacementPeriod.replacement_period)
  return _internal_replacement_period();
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::release_replacement_period() {
  // @@protoc_insertion_point(field_release:TripReplacementPeriod.replacement_period)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TimeRange* temp = replacement_period_;
  replacement_period_ = nullptr;
  return temp;
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::_internal_mutable_replacement_period() {
  _has_bits_[0] |= 0x00000002u;
  if (replacement_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TimeRange>(GetArenaNoVirtual());
    replacement_period_ = p;
  }
  return replacement_period_;
}
inline ::transit_realtime::TimeRange* TripReplacementPeriod::mutable_replacement_period() {
  // @@protoc_insertion_point(field_mutable:TripReplacementPeriod.replacement_period)
  return _internal_mutable_replacement_period();
}
inline void TripReplacementPeriod::set_allocated_replacement_period(::transit_realtime::TimeRange* replacement_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_period_);
  }
  if (replacement_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      replacement_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  replacement_period_ = replacement_period;
  // @@protoc_insertion_point(field_set_allocated:TripReplacementPeriod.replacement_period)
}

// -------------------------------------------------------------------

// NyctFeedHeader

// required string nyct_subway_version = 1;
inline bool NyctFeedHeader::_internal_has_nyct_subway_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NyctFeedHeader::has_nyct_subway_version() const {
  return _internal_has_nyct_subway_version();
}
inline void NyctFeedHeader::clear_nyct_subway_version() {
  nyct_subway_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NyctFeedHeader::nyct_subway_version() const {
  // @@protoc_insertion_point(field_get:NyctFeedHeader.nyct_subway_version)
  return _internal_nyct_subway_version();
}
inline void NyctFeedHeader::set_nyct_subway_version(const std::string& value) {
  _internal_set_nyct_subway_version(value);
  // @@protoc_insertion_point(field_set:NyctFeedHeader.nyct_subway_version)
}
inline std::string* NyctFeedHeader::mutable_nyct_subway_version() {
  // @@protoc_insertion_point(field_mutable:NyctFeedHeader.nyct_subway_version)
  return _internal_mutable_nyct_subway_version();
}
inline const std::string& NyctFeedHeader::_internal_nyct_subway_version() const {
  return nyct_subway_version_.GetNoArena();
}
inline void NyctFeedHeader::_internal_set_nyct_subway_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nyct_subway_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NyctFeedHeader::set_nyct_subway_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nyct_subway_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctFeedHeader.nyct_subway_version)
}
inline void NyctFeedHeader::set_nyct_subway_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nyct_subway_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctFeedHeader.nyct_subway_version)
}
inline void NyctFeedHeader::set_nyct_subway_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nyct_subway_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctFeedHeader.nyct_subway_version)
}
inline std::string* NyctFeedHeader::_internal_mutable_nyct_subway_version() {
  _has_bits_[0] |= 0x00000001u;
  return nyct_subway_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NyctFeedHeader::release_nyct_subway_version() {
  // @@protoc_insertion_point(field_release:NyctFeedHeader.nyct_subway_version)
  if (!has_nyct_subway_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nyct_subway_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NyctFeedHeader::set_allocated_nyct_subway_version(std::string* nyct_subway_version) {
  if (nyct_subway_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nyct_subway_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nyct_subway_version);
  // @@protoc_insertion_point(field_set_allocated:NyctFeedHeader.nyct_subway_version)
}

// repeated .TripReplacementPeriod trip_replacement_period = 2;
inline int NyctFeedHeader::_internal_trip_replacement_period_size() const {
  return trip_replacement_period_.size();
}
inline int NyctFeedHeader::trip_replacement_period_size() const {
  return _internal_trip_replacement_period_size();
}
inline void NyctFeedHeader::clear_trip_replacement_period() {
  trip_replacement_period_.Clear();
}
inline ::TripReplacementPeriod* NyctFeedHeader::mutable_trip_replacement_period(int index) {
  // @@protoc_insertion_point(field_mutable:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TripReplacementPeriod >*
NyctFeedHeader::mutable_trip_replacement_period() {
  // @@protoc_insertion_point(field_mutable_list:NyctFeedHeader.trip_replacement_period)
  return &trip_replacement_period_;
}
inline const ::TripReplacementPeriod& NyctFeedHeader::_internal_trip_replacement_period(int index) const {
  return trip_replacement_period_.Get(index);
}
inline const ::TripReplacementPeriod& NyctFeedHeader::trip_replacement_period(int index) const {
  // @@protoc_insertion_point(field_get:NyctFeedHeader.trip_replacement_period)
  return _internal_trip_replacement_period(index);
}
inline ::TripReplacementPeriod* NyctFeedHeader::_internal_add_trip_replacement_period() {
  return trip_replacement_period_.Add();
}
inline ::TripReplacementPeriod* NyctFeedHeader::add_trip_replacement_period() {
  // @@protoc_insertion_point(field_add:NyctFeedHeader.trip_replacement_period)
  return _internal_add_trip_replacement_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TripReplacementPeriod >&
NyctFeedHeader::trip_replacement_period() const {
  // @@protoc_insertion_point(field_list:NyctFeedHeader.trip_replacement_period)
  return trip_replacement_period_;
}

// -------------------------------------------------------------------

// NyctTripDescriptor

// optional bytes train_id = 1;
inline bool NyctTripDescriptor::_internal_has_train_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NyctTripDescriptor::has_train_id() const {
  return _internal_has_train_id();
}
inline void NyctTripDescriptor::clear_train_id() {
  train_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NyctTripDescriptor::train_id() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.train_id)
  return _internal_train_id();
}
inline void NyctTripDescriptor::set_train_id(const std::string& value) {
  _internal_set_train_id(value);
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.train_id)
}
inline std::string* NyctTripDescriptor::mutable_train_id() {
  // @@protoc_insertion_point(field_mutable:NyctTripDescriptor.train_id)
  return _internal_mutable_train_id();
}
inline const std::string& NyctTripDescriptor::_internal_train_id() const {
  return train_id_.GetNoArena();
}
inline void NyctTripDescriptor::_internal_set_train_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  train_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NyctTripDescriptor::set_train_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  train_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctTripDescriptor.train_id)
}
inline void NyctTripDescriptor::set_train_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  train_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctTripDescriptor.train_id)
}
inline void NyctTripDescriptor::set_train_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  train_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctTripDescriptor.train_id)
}
inline std::string* NyctTripDescriptor::_internal_mutable_train_id() {
  _has_bits_[0] |= 0x00000001u;
  return train_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NyctTripDescriptor::release_train_id() {
  // @@protoc_insertion_point(field_release:NyctTripDescriptor.train_id)
  if (!has_train_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return train_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NyctTripDescriptor::set_allocated_train_id(std::string* train_id) {
  if (train_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  train_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), train_id);
  // @@protoc_insertion_point(field_set_allocated:NyctTripDescriptor.train_id)
}

// optional bool is_assigned = 2;
inline bool NyctTripDescriptor::_internal_has_is_assigned() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NyctTripDescriptor::has_is_assigned() const {
  return _internal_has_is_assigned();
}
inline void NyctTripDescriptor::clear_is_assigned() {
  is_assigned_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool NyctTripDescriptor::_internal_is_assigned() const {
  return is_assigned_;
}
inline bool NyctTripDescriptor::is_assigned() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.is_assigned)
  return _internal_is_assigned();
}
inline void NyctTripDescriptor::_internal_set_is_assigned(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_assigned_ = value;
}
inline void NyctTripDescriptor::set_is_assigned(bool value) {
  _internal_set_is_assigned(value);
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.is_assigned)
}

// optional .NyctTripDescriptor.Direction direction = 3;
inline bool NyctTripDescriptor::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NyctTripDescriptor::has_direction() const {
  return _internal_has_direction();
}
inline void NyctTripDescriptor::clear_direction() {
  direction_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::NyctTripDescriptor_Direction NyctTripDescriptor::_internal_direction() const {
  return static_cast< ::NyctTripDescriptor_Direction >(direction_);
}
inline ::NyctTripDescriptor_Direction NyctTripDescriptor::direction() const {
  // @@protoc_insertion_point(field_get:NyctTripDescriptor.direction)
  return _internal_direction();
}
inline void NyctTripDescriptor::_internal_set_direction(::NyctTripDescriptor_Direction value) {
  assert(::NyctTripDescriptor_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  direction_ = value;
}
inline void NyctTripDescriptor::set_direction(::NyctTripDescriptor_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:NyctTripDescriptor.direction)
}

// -------------------------------------------------------------------

// NyctStopTimeUpdate

// optional string scheduled_track = 1;
inline bool NyctStopTimeUpdate::_internal_has_scheduled_track() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NyctStopTimeUpdate::has_scheduled_track() const {
  return _internal_has_scheduled_track();
}
inline void NyctStopTimeUpdate::clear_scheduled_track() {
  scheduled_track_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NyctStopTimeUpdate::scheduled_track() const {
  // @@protoc_insertion_point(field_get:NyctStopTimeUpdate.scheduled_track)
  return _internal_scheduled_track();
}
inline void NyctStopTimeUpdate::set_scheduled_track(const std::string& value) {
  _internal_set_scheduled_track(value);
  // @@protoc_insertion_point(field_set:NyctStopTimeUpdate.scheduled_track)
}
inline std::string* NyctStopTimeUpdate::mutable_scheduled_track() {
  // @@protoc_insertion_point(field_mutable:NyctStopTimeUpdate.scheduled_track)
  return _internal_mutable_scheduled_track();
}
inline const std::string& NyctStopTimeUpdate::_internal_scheduled_track() const {
  return scheduled_track_.GetNoArena();
}
inline void NyctStopTimeUpdate::_internal_set_scheduled_track(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scheduled_track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NyctStopTimeUpdate::set_scheduled_track(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scheduled_track_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctStopTimeUpdate.scheduled_track)
}
inline void NyctStopTimeUpdate::set_scheduled_track(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scheduled_track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctStopTimeUpdate.scheduled_track)
}
inline void NyctStopTimeUpdate::set_scheduled_track(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scheduled_track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctStopTimeUpdate.scheduled_track)
}
inline std::string* NyctStopTimeUpdate::_internal_mutable_scheduled_track() {
  _has_bits_[0] |= 0x00000001u;
  return scheduled_track_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NyctStopTimeUpdate::release_scheduled_track() {
  // @@protoc_insertion_point(field_release:NyctStopTimeUpdate.scheduled_track)
  if (!has_scheduled_track()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scheduled_track_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NyctStopTimeUpdate::set_allocated_scheduled_track(std::string* scheduled_track) {
  if (scheduled_track != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheduled_track_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheduled_track);
  // @@protoc_insertion_point(field_set_allocated:NyctStopTimeUpdate.scheduled_track)
}

// optional string actual_track = 2;
inline bool NyctStopTimeUpdate::_internal_has_actual_track() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NyctStopTimeUpdate::has_actual_track() const {
  return _internal_has_actual_track();
}
inline void NyctStopTimeUpdate::clear_actual_track() {
  actual_track_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NyctStopTimeUpdate::actual_track() const {
  // @@protoc_insertion_point(field_get:NyctStopTimeUpdate.actual_track)
  return _internal_actual_track();
}
inline void NyctStopTimeUpdate::set_actual_track(const std::string& value) {
  _internal_set_actual_track(value);
  // @@protoc_insertion_point(field_set:NyctStopTimeUpdate.actual_track)
}
inline std::string* NyctStopTimeUpdate::mutable_actual_track() {
  // @@protoc_insertion_point(field_mutable:NyctStopTimeUpdate.actual_track)
  return _internal_mutable_actual_track();
}
inline const std::string& NyctStopTimeUpdate::_internal_actual_track() const {
  return actual_track_.GetNoArena();
}
inline void NyctStopTimeUpdate::_internal_set_actual_track(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  actual_track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NyctStopTimeUpdate::set_actual_track(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  actual_track_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NyctStopTimeUpdate.actual_track)
}
inline void NyctStopTimeUpdate::set_actual_track(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  actual_track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NyctStopTimeUpdate.actual_track)
}
inline void NyctStopTimeUpdate::set_actual_track(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  actual_track_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NyctStopTimeUpdate.actual_track)
}
inline std::string* NyctStopTimeUpdate::_internal_mutable_actual_track() {
  _has_bits_[0] |= 0x00000002u;
  return actual_track_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NyctStopTimeUpdate::release_actual_track() {
  // @@protoc_insertion_point(field_release:NyctStopTimeUpdate.actual_track)
  if (!has_actual_track()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return actual_track_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NyctStopTimeUpdate::set_allocated_actual_track(std::string* actual_track) {
  if (actual_track != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  actual_track_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actual_track);
  // @@protoc_insertion_point(field_set_allocated:NyctStopTimeUpdate.actual_track)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NyctTripDescriptor_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NyctTripDescriptor_Direction>() {
  return ::NyctTripDescriptor_Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nyct_2dsubway_2eproto
